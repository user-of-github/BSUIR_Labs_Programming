        -:    0:Source:c:/mingw/include/c++/9.2.0/bits/move.h
        -:    0:Graph:interpol.gcno
        -:    0:Data:interpol.gcda
        -:    0:Runs:1
        -:    1:// Move, forward and identity for C++11 + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <bits/concept_check.h>
        -:   35:
        -:   36:namespace std _GLIBCXX_VISIBILITY(default)
        -:   37:{
        -:   38:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   39:
        -:   40:  // Used, in C++03 mode too, by allocators, etc.
        -:   41:  /**
        -:   42:   *  @brief Same as C++11 std::addressof
        -:   43:   *  @ingroup utilities
        -:   44:   */
        -:   45:  template<typename _Tp>
        -:   46:    inline _GLIBCXX_CONSTEXPR _Tp*
      22*:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
      22*:   48:    { return __builtin_addressof(__r); }
------------------
_ZSt11__addressofISaISt10_List_nodeIP5CrimeEEEPT_RS5_:
function _ZSt11__addressofISaISt10_List_nodeIP5CrimeEEEPT_RS5_ called 2 returned 100% blocks executed 100%
        2:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        2:   48:    { return __builtin_addressof(__r); }
        2:   48-block  0
unconditional  0 taken 2
------------------
_ZSt11__addressofISaISt10_List_nodeIP12OrganizationEEEPT_RS5_:
function _ZSt11__addressofISaISt10_List_nodeIP12OrganizationEEEPT_RS5_ called 4 returned 100% blocks executed 100%
        4:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        4:   48:    { return __builtin_addressof(__r); }
        4:   48-block  0
unconditional  0 taken 4
------------------
_ZSt11__addressofISaISt10_List_nodeI9CrimeTypeEEEPT_RS4_:
function _ZSt11__addressofISaISt10_List_nodeI9CrimeTypeEEEPT_RS4_ called 16 returned 100% blocks executed 100%
       16:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       16:   48:    { return __builtin_addressof(__r); }
       16:   48-block  0
unconditional  0 taken 16
------------------
_ZSt11__addressofISaISt10_List_nodeIP14CriminalPersonEEEPT_RS5_:
function _ZSt11__addressofISaISt10_List_nodeIP14CriminalPersonEEEPT_RS5_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
unconditional  0 never executed
------------------
_ZSt11__addressofIKP12OrganizationEPT_RS3_:
function _ZSt11__addressofIKP12OrganizationEPT_RS3_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
unconditional  0 never executed
------------------
_ZSt11__addressofIP12OrganizationEPT_RS2_:
function _ZSt11__addressofIP12OrganizationEPT_RS2_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
unconditional  0 never executed
------------------
_ZSt11__addressofIKP5CrimeEPT_RS3_:
function _ZSt11__addressofIKP5CrimeEPT_RS3_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
unconditional  0 never executed
------------------
_ZSt11__addressofIP5CrimeEPT_RS2_:
function _ZSt11__addressofIP5CrimeEPT_RS2_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
unconditional  0 never executed
------------------
_ZSt11__addressofIKP14CriminalPersonEPT_RS3_:
function _ZSt11__addressofIKP14CriminalPersonEPT_RS3_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
unconditional  0 never executed
------------------
_ZSt11__addressofIP14CriminalPersonEPT_RS2_:
function _ZSt11__addressofIP14CriminalPersonEPT_RS2_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
unconditional  0 never executed
------------------
        -:   49:
        -:   50:#if __cplusplus >= 201103L
        -:   51:
        -:   52:_GLIBCXX_END_NAMESPACE_VERSION
        -:   53:} // namespace
        -:   54:
        -:   55:#include <type_traits> // Brings in std::declval too.
        -:   56:
        -:   57:namespace std _GLIBCXX_VISIBILITY(default)
        -:   58:{
        -:   59:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   60:
        -:   61:  /**
        -:   62:   *  @addtogroup utilities
        -:   63:   *  @{
        -:   64:   */
        -:   65:
        -:   66:  /**
        -:   67:   *  @brief  Forward an lvalue.
        -:   68:   *  @return The parameter cast to the specified type.
        -:   69:   *
        -:   70:   *  This function is used to implement "perfect forwarding".
        -:   71:   */
        -:   72:  template<typename _Tp>
        -:   73:    constexpr _Tp&&
     331*:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
     331*:   75:    { return static_cast<_Tp&&>(__t); }
------------------
_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE:
function _ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE called 0 returned 0% blocks executed 0%
    #####:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   75:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   75-block  0
unconditional  0 never executed
------------------
_ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE:
function _ZSt7forwardINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS6_E4typeE called 18 returned 100% blocks executed 100%
       18:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       18:   75:    { return static_cast<_Tp&&>(__t); }
       18:   75-block  0
unconditional  0 taken 18
------------------
_ZSt7forwardIRP14CriminalPersonEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRP14CriminalPersonEOT_RNSt16remove_referenceIS3_E4typeE called 4 returned 100% blocks executed 100%
        4:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        4:   75:    { return static_cast<_Tp&&>(__t); }
        4:   75-block  0
unconditional  0 taken 4
------------------
_ZSt7forwardISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP14CriminalPersonEEOT_RNSt16remove_referenceISA_E4typeE:
function _ZSt7forwardISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP14CriminalPersonEEOT_RNSt16remove_referenceISA_E4typeE called 12 returned 100% blocks executed 100%
       12:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       12:   75:    { return static_cast<_Tp&&>(__t); }
       12:   75-block  0
unconditional  0 taken 12
------------------
_ZSt7forwardIRP5CrimeEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRP5CrimeEOT_RNSt16remove_referenceIS3_E4typeE called 4 returned 100% blocks executed 100%
        4:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        4:   75:    { return static_cast<_Tp&&>(__t); }
        4:   75-block  0
unconditional  0 taken 4
------------------
_ZSt7forwardISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5CrimeEEOT_RNSt16remove_referenceISA_E4typeE:
function _ZSt7forwardISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5CrimeEEOT_RNSt16remove_referenceISA_E4typeE called 12 returned 100% blocks executed 100%
       12:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       12:   75:    { return static_cast<_Tp&&>(__t); }
       12:   75-block  0
unconditional  0 taken 12
------------------
_ZSt7forwardIRP12OrganizationEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRP12OrganizationEOT_RNSt16remove_referenceIS3_E4typeE called 4 returned 100% blocks executed 100%
        4:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        4:   75:    { return static_cast<_Tp&&>(__t); }
        4:   75-block  0
unconditional  0 taken 4
------------------
_ZSt7forwardISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12OrganizationEEOT_RNSt16remove_referenceISA_E4typeE:
function _ZSt7forwardISt4pairINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12OrganizationEEOT_RNSt16remove_referenceISA_E4typeE called 12 returned 100% blocks executed 100%
       12:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       12:   75:    { return static_cast<_Tp&&>(__t); }
       12:   75-block  0
unconditional  0 taken 12
------------------
_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE:
function _ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE called 63 returned 100% blocks executed 100%
       63:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       63:   75:    { return static_cast<_Tp&&>(__t); }
       63:   75-block  0
unconditional  0 taken 63
------------------
_ZSt7forwardIRSt17_Rb_tree_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceIS9_E4typeE:
function _ZSt7forwardIRSt17_Rb_tree_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceIS9_E4typeE called 11 returned 100% blocks executed 100%
       11:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       11:   75:    { return static_cast<_Tp&&>(__t); }
       11:   75-block  0
unconditional  0 taken 11
------------------
_ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE:
function _ZSt7forwardIRbEOT_RNSt16remove_referenceIS1_E4typeE called 11 returned 100% blocks executed 100%
       11:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       11:   75:    { return static_cast<_Tp&&>(__t); }
       11:   75-block  0
unconditional  0 taken 11
------------------
_ZSt7forwardIRKP14CriminalPersonEOT_RNSt16remove_referenceIS4_E4typeE:
function _ZSt7forwardIRKP14CriminalPersonEOT_RNSt16remove_referenceIS4_E4typeE called 0 returned 0% blocks executed 0%
    #####:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   75:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   75-block  0
unconditional  0 never executed
------------------
_ZSt7forwardIRK9CrimeTypeEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRK9CrimeTypeEOT_RNSt16remove_referenceIS3_E4typeE called 60 returned 100% blocks executed 100%
       60:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       60:   75:    { return static_cast<_Tp&&>(__t); }
       60:   75-block  0
unconditional  0 taken 60
------------------
_ZSt7forwardIRKP12OrganizationEOT_RNSt16remove_referenceIS4_E4typeE:
function _ZSt7forwardIRKP12OrganizationEOT_RNSt16remove_referenceIS4_E4typeE called 16 returned 100% blocks executed 100%
       16:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       16:   75:    { return static_cast<_Tp&&>(__t); }
       16:   75-block  0
unconditional  0 taken 16
------------------
_ZSt7forwardIRKP5CrimeEOT_RNSt16remove_referenceIS4_E4typeE:
function _ZSt7forwardIRKP5CrimeEOT_RNSt16remove_referenceIS4_E4typeE called 8 returned 100% blocks executed 100%
        8:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        8:   75:    { return static_cast<_Tp&&>(__t); }
        8:   75-block  0
unconditional  0 taken 8
------------------
_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE called 0 returned 0% blocks executed 0%
    #####:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   75:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   75-block  0
unconditional  0 never executed
------------------
_ZSt7forwardIP12OrganizationEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardIP12OrganizationEOT_RNSt16remove_referenceIS2_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE called 0 returned 0% blocks executed 0%
    #####:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   75:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   75-block  0
unconditional  0 never executed
------------------
_ZSt7forwardI9CrimeTypeEOT_RNSt16remove_referenceIS1_E4typeE:
function _ZSt7forwardI9CrimeTypeEOT_RNSt16remove_referenceIS1_E4typeE called 16 returned 100% blocks executed 100%
       16:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       16:   75:    { return static_cast<_Tp&&>(__t); }
       16:   75-block  0
unconditional  0 taken 16
------------------
_ZSt7forwardIP14CriminalPersonEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardIP14CriminalPersonEOT_RNSt16remove_referenceIS2_E4typeE called 10 returned 100% blocks executed 100%
       10:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       10:   75:    { return static_cast<_Tp&&>(__t); }
       10:   75-block  0
unconditional  0 taken 10
------------------
_ZSt7forwardISt17_Rb_tree_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceIS8_E4typeE:
function _ZSt7forwardISt17_Rb_tree_iteratorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceIS8_E4typeE called 11 returned 100% blocks executed 100%
       11:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       11:   75:    { return static_cast<_Tp&&>(__t); }
       11:   75-block  0
unconditional  0 taken 11
------------------
_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE:
function _ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE called 17 returned 100% blocks executed 100%
       17:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       17:   75:    { return static_cast<_Tp&&>(__t); }
       17:   75-block  0
unconditional  0 taken 17
------------------
_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP14CriminalPersonEEEOT_RNSt16remove_referenceISD_E4typeE:
function _ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP14CriminalPersonEEEOT_RNSt16remove_referenceISD_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5CrimeEEEOT_RNSt16remove_referenceISD_E4typeE:
function _ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5CrimeEEEOT_RNSt16remove_referenceISD_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
_ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12OrganizationEEEOT_RNSt16remove_referenceISD_E4typeE:
function _ZSt7forwardISt17_Rb_tree_iteratorISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12OrganizationEEEOT_RNSt16remove_referenceISD_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
_ZSt7forwardIRPSt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISA_E4typeE:
function _ZSt7forwardIRPSt13_Rb_tree_nodeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEOT_RNSt16remove_referenceISA_E4typeE called 9 returned 100% blocks executed 100%
        9:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        9:   75:    { return static_cast<_Tp&&>(__t); }
        9:   75-block  0
unconditional  0 taken 9
------------------
_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE called 17 returned 100% blocks executed 100%
       17:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       17:   75:    { return static_cast<_Tp&&>(__t); }
       17:   75-block  0
unconditional  0 taken 17
------------------
_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP14CriminalPersonEEEOT_RNSt16remove_referenceISF_E4typeE:
function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP14CriminalPersonEEEOT_RNSt16remove_referenceISF_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5CrimeEEEOT_RNSt16remove_referenceISF_E4typeE:
function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP5CrimeEEEOT_RNSt16remove_referenceISF_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12OrganizationEEEOT_RNSt16remove_referenceISF_E4typeE:
function _ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP12OrganizationEEEOT_RNSt16remove_referenceISF_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
_ZSt7forwardIP5CrimeEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardIP5CrimeEOT_RNSt16remove_referenceIS2_E4typeE called 2 returned 100% blocks executed 100%
        2:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        2:   75:    { return static_cast<_Tp&&>(__t); }
        2:   75-block  0
unconditional  0 taken 2
------------------
        -:   76:
        -:   77:  /**
        -:   78:   *  @brief  Forward an rvalue.
        -:   79:   *  @return The parameter cast to the specified type.
        -:   80:   *
        -:   81:   *  This function is used to implement "perfect forwarding".
        -:   82:   */
        -:   83:  template<typename _Tp>
        -:   84:    constexpr _Tp&&
        -:   85:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   86:    {
        -:   87:      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        -:   88:		    " substituting _Tp is an lvalue reference type");
        -:   89:      return static_cast<_Tp&&>(__t);
        -:   90:    }
        -:   91:
        -:   92:  /**
        -:   93:   *  @brief  Convert a value to an rvalue.
        -:   94:   *  @param  __t  A thing of arbitrary type.
        -:   95:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:   96:  */
        -:   97:  template<typename _Tp>
        -:   98:    constexpr typename std::remove_reference<_Tp>::type&&
     134*:   99:    move(_Tp&& __t) noexcept
     134*:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
_ZSt4moveIRZN12Organization14AddActionsTypeERK9CrimeTypeEUlRKT_E_EONSt16remove_referenceIS4_E4typeEOS4_:
function _ZSt4moveIRZN12Organization14AddActionsTypeERK9CrimeTypeEUlRKT_E_EONSt16remove_referenceIS4_E4typeEOS4_ called 2 returned 100% blocks executed 100%
        2:   99:    move(_Tp&& __t) noexcept
        2:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        2:  100-block  0
unconditional  0 taken 2
------------------
_ZSt4moveIRSaISt10_List_nodeI9CrimeTypeEEEONSt16remove_referenceIT_E4typeEOS6_:
function _ZSt4moveIRSaISt10_List_nodeI9CrimeTypeEEEONSt16remove_referenceIT_E4typeEOS6_ called 14 returned 100% blocks executed 100%
       14:   99:    move(_Tp&& __t) noexcept
       14:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       14:  100-block  0
unconditional  0 taken 14
------------------
_ZSt4moveIRSaISt10_List_nodeIP14CriminalPersonEEEONSt16remove_referenceIT_E4typeEOS7_:
function _ZSt4moveIRSaISt10_List_nodeIP14CriminalPersonEEEONSt16remove_referenceIT_E4typeEOS7_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
unconditional  0 never executed
------------------
_ZSt4moveIRZ9RightTrimNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlhE_EONSt16remove_referenceIT_E4typeEOS9_:
function _ZSt4moveIRZ9RightTrimNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlhE_EONSt16remove_referenceIT_E4typeEOS9_ called 54 returned 100% blocks executed 100%
       54:   99:    move(_Tp&& __t) noexcept
       54:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       54:  100-block  0
unconditional  0 taken 54
------------------
_ZSt4moveIRZ8LeftTrimNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlhE_EONSt16remove_referenceIT_E4typeEOS9_:
function _ZSt4moveIRZ8LeftTrimNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlhE_EONSt16remove_referenceIT_E4typeEOS9_ called 54 returned 100% blocks executed 100%
       54:   99:    move(_Tp&& __t) noexcept
       54:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       54:  100-block  0
unconditional  0 taken 54
------------------
_ZSt4moveIRP14CriminalPersonEONSt16remove_referenceIT_E4typeEOS4_:
function _ZSt4moveIRP14CriminalPersonEONSt16remove_referenceIT_E4typeEOS4_ called 2 returned 100% blocks executed 100%
        2:   99:    move(_Tp&& __t) noexcept
        2:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        2:  100-block  0
unconditional  0 taken 2
------------------
_ZSt4moveIR9CrimeTypeEONSt16remove_referenceIT_E4typeEOS3_:
function _ZSt4moveIR9CrimeTypeEONSt16remove_referenceIT_E4typeEOS3_ called 4 returned 100% blocks executed 100%
        4:   99:    move(_Tp&& __t) noexcept
        4:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        4:  100-block  0
unconditional  0 taken 4
------------------
_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_ called 4 returned 100% blocks executed 100%
        4:   99:    move(_Tp&& __t) noexcept
        4:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        4:  100-block  0
unconditional  0 taken 4
------------------
_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_:
function _ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
unconditional  0 never executed
------------------
        -:  101:
        -:  102:
        -:  103:  template<typename _Tp>
        -:  104:    struct __move_if_noexcept_cond
        -:  105:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  106:                    is_copy_constructible<_Tp>>::type { };
        -:  107:
        -:  108:  /**
        -:  109:   *  @brief  Conditionally convert a value to an rvalue.
        -:  110:   *  @param  __x  A thing of arbitrary type.
        -:  111:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  112:   *
        -:  113:   *  Same as std::move unless the type's move constructor could throw and the
        -:  114:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  115:   */
        -:  116:  template<typename _Tp>
        -:  117:    constexpr typename
        -:  118:    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
        -:  119:    move_if_noexcept(_Tp& __x) noexcept
        -:  120:    { return std::move(__x); }
        -:  121:
        -:  122:  // declval, from type_traits.
        -:  123:
        -:  124:#if __cplusplus > 201402L
        -:  125:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:  // 2296. std::addressof should be constexpr
        -:  127:# define __cpp_lib_addressof_constexpr 201603
        -:  128:#endif
        -:  129:  /**
        -:  130:   *  @brief Returns the actual address of the object or function
        -:  131:   *         referenced by r, even in the presence of an overloaded
        -:  132:   *         operator&.
        -:  133:   *  @param  __r  Reference to an object or function.
        -:  134:   *  @return   The actual address.
        -:  135:  */
        -:  136:  template<typename _Tp>
        -:  137:    inline _GLIBCXX17_CONSTEXPR _Tp*
        -:  138:    addressof(_Tp& __r) noexcept
        -:  139:    { return std::__addressof(__r); }
        -:  140:
        -:  141:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  142:  // 2598. addressof works on temporaries
        -:  143:  template<typename _Tp>
        -:  144:    const _Tp* addressof(const _Tp&&) = delete;
        -:  145:
        -:  146:  // C++11 version of std::exchange for internal use.
        -:  147:  template <typename _Tp, typename _Up = _Tp>
        -:  148:    inline _Tp
        -:  149:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  150:    {
        -:  151:      _Tp __old_val = std::move(__obj);
        -:  152:      __obj = std::forward<_Up>(__new_val);
        -:  153:      return __old_val;
        -:  154:    }
        -:  155:
        -:  156:  /// @} group utilities
        -:  157:
        -:  158:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  159:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  160:#else
        -:  161:#define _GLIBCXX_MOVE(__val) (__val)
        -:  162:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  163:#endif
        -:  164:
        -:  165:  /**
        -:  166:   *  @addtogroup utilities
        -:  167:   *  @{
        -:  168:   */
        -:  169:
        -:  170:  /**
        -:  171:   *  @brief Swaps two values.
        -:  172:   *  @param  __a  A thing of arbitrary type.
        -:  173:   *  @param  __b  Another thing of arbitrary type.
        -:  174:   *  @return   Nothing.
        -:  175:  */
        -:  176:  template<typename _Tp>
        -:  177:    inline
        -:  178:#if __cplusplus >= 201103L
        -:  179:    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        -:  180:			      is_move_constructible<_Tp>,
        -:  181:			      is_move_assignable<_Tp>>::value>::type
        -:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
        -:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
        -:  194:      __a = _GLIBCXX_MOVE(__b);
        -:  195:      __b = _GLIBCXX_MOVE(__tmp);
        -:  196:    }
        -:  197:
        -:  198:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  199:  // DR 809. std::swap should be overloaded for array types.
        -:  200:  /// Swap the contents of two arrays.
        -:  201:  template<typename _Tp, size_t _Nm>
        -:  202:    inline
        -:  203:#if __cplusplus >= 201103L
        -:  204:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  205:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  206:    noexcept(__is_nothrow_swappable<_Tp>::value)
        -:  207:#else
        -:  208:    void
        -:  209:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  210:#endif
        -:  211:    {
        -:  212:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  213:	swap(__a[__n], __b[__n]);
        -:  214:    }
        -:  215:
        -:  216:  /// @} group utilities
        -:  217:_GLIBCXX_END_NAMESPACE_VERSION
        -:  218:} // namespace
        -:  219:
        -:  220:#endif /* _MOVE_H */
